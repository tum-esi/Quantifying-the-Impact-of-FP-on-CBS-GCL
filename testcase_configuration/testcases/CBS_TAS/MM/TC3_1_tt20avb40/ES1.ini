[General]
network = testcases.CBS_TAS.MM.TC3_1_tt20avb40.mm

# *.ES1.eth[*].address = "0A-00-00-00-00-01"

*.ES1.numApps = 9
*.ES1.app[*].typename = "UdpSourceApp"

# NO SINK APPLICATIONS

# SOURCE APPLICATIONS
# vl0 : ES1,SW1 ; SW1,SW3 ; SW3,ES7 ;
# Flow100, 562, 1000, vl0, TT, 1000, 0.0
*.ES1.app[0].display-name = "Flow100"
*.ES1.app[0].io.destAddress = "ES7"
*.ES1.app[0].io.destPort = 1000
*.ES1.app[0].source.packetNameFormat = "%M->ES7:TT-%c"
*.ES1.app[0].source.packetLength = 562B - 58B
*.ES1.app[0].source.productionInterval = 1000us
# *.ES1.app[0].tagger.vlanId = 100

# Flow0 (99), 174, 5000, vl0, CLASS_A, 5000, 0.0
*.ES1.app[1].display-name = "Flow99"
*.ES1.app[1].io.destAddress = "ES7"
*.ES1.app[1].io.destPort = 1001
*.ES1.app[1].source.packetNameFormat = "%M->ES7:AVB_A-%c"
*.ES1.app[1].source.packetLength = 160B - 58B
*.ES1.app[1].source.productionInterval = 10000us# + exponential(1us)

# Flow15, 174, 5000, vl0, CLASS_A, 5000, 0.0
*.ES1.app[2].display-name = "Flow15"
*.ES1.app[2].io.destAddress = "ES7"
*.ES1.app[2].io.destPort = 1002
*.ES1.app[2].source.packetNameFormat = "%M->ES7:AVB_A-%c"
*.ES1.app[2].source.packetLength = 1160B - 58B
*.ES1.app[2].source.productionInterval = 2000us# + exponential(1us)

*.ES1.app[0].source.initialProductionOffset = 0us 					# offset according to historySCHED1.txt 
*.ES1.app[1].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES1.app[2].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset



# vl7 : ES1,SW1 ; SW1,SW3 ; SW3,SW4 ; SW4,ES12 ;
# Flow107, 286, 1000, vl7, TT, 1000, 0.0
*.ES1.app[3].display-name = "Flow107"
*.ES1.app[3].io.destAddress = "ES12"
*.ES1.app[3].io.destPort = 1003
*.ES1.app[3].source.packetNameFormat = "%M->ES12:TT-%c"
*.ES1.app[3].source.packetLength = 286B - 58B
*.ES1.app[3].source.productionInterval = 1000us# + exponential(1us)

# Flow7, 148, 10000, vl7, CLASS_A, 10000, 0.0
*.ES1.app[4].display-name = "Flow7"
*.ES1.app[4].io.destAddress = "ES12"
*.ES1.app[4].io.destPort = 1004
*.ES1.app[4].source.packetNameFormat = "%M->ES12:AVB_A-%c"
*.ES1.app[4].source.packetLength = 266B - 58B
*.ES1.app[4].source.productionInterval = 5000us# + exponential(1us)

# Flow22, 748, 10000, vl7, CLASS_A, 10000, 0.0
*.ES1.app[5].display-name = "Flow22"
*.ES1.app[5].io.destAddress = "ES12"
*.ES1.app[5].io.destPort = 1005
*.ES1.app[5].source.packetNameFormat = "%M->ES12:AVB_A-%c"
*.ES1.app[5].source.packetLength = 266B - 58B
*.ES1.app[5].source.productionInterval = 5000us# + exponential(1us)

*.ES1.app[3].source.initialProductionOffset = 217us 				# offset according to historySCHED1.txt 
*.ES1.app[4].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES1.app[5].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset


# vl12 : ES1,SW1 ; SW1,SW3 ; SW3,SW4 ; SW4,ES10 ;
# Flow112, 98, 1000, vl12, TT, 1000, 0.0
*.ES1.app[6].display-name = "Flow112"
*.ES1.app[6].io.destAddress = "ES10"
*.ES1.app[6].io.destPort = 1006
*.ES1.app[6].source.packetNameFormat = "%M->ES10:TT-%c"
*.ES1.app[6].source.packetLength = 98B - 58B
*.ES1.app[6].source.productionInterval = 1000us# + exponential(1us)

# Flow12, 518, 10000, vl12, CLASS_A, 10000, 0.0
*.ES1.app[7].display-name = "Flow12"
*.ES1.app[7].io.destAddress = "ES10"
*.ES1.app[7].io.destPort = 1007
*.ES1.app[7].source.packetNameFormat = "%M->ES10:AVB_A-%c"
*.ES1.app[7].source.packetLength = 1252B - 58B
*.ES1.app[7].source.productionInterval = 10000us# + exponential(1us)

# Flow27, 518, 10000, vl12, CLASS_A, 10000, 0.0
*.ES1.app[8].display-name = "Flow27"
*.ES1.app[8].io.destAddress = "ES10"
*.ES1.app[8].io.destPort = 1008
*.ES1.app[8].source.packetNameFormat = "%M->ES10:AVB_A-%c"
*.ES1.app[8].source.packetLength = 252B - 58B
*.ES1.app[8].source.productionInterval = 10000us# + exponential(1us)

*.ES1.app[6].source.initialProductionOffset = 313us					# offset according to historySCHED1.txt 
*.ES1.app[7].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES1.app[8].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset


## configure all egress traffic as part of stream Flow1, start sequence numbering # CHECKED
*.ES1.bridging.streamIdentifier.identifier.mapping = [{packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1000), stream: "Flow100", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1001), stream: "Flow0", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1002), stream: "Flow15", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1003), stream: "Flow107", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1004), stream: "Flow7", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1005), stream: "Flow22", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1006), stream: "Flow112", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1007), stream: "Flow12", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1008), stream: "Flow27", sequenceNumbering: true}]

# encode egress Flows to PCP # CHECKED
*.ES1.bridging.streamCoder.encoder.mapping = [{stream: "Flow100", pcp: 4, vlan: 100},
											  {stream: "Flow0", pcp: 0, vlan: 99},
											  {stream: "Flow15", pcp: 0, vlan: 15},
											  {stream: "Flow107", pcp: 4, vlan: 107},
											  {stream: "Flow7", pcp: 0, vlan: 7},
											  {stream: "Flow22", pcp: 0, vlan: 22},
											  {stream: "Flow112", pcp: 4, vlan: 112},
											  {stream: "Flow12", pcp: 0, vlan: 12},
											  {stream: "Flow27", pcp: 0, vlan: 27}]