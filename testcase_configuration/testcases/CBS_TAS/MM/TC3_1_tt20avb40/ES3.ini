[General]
network = testcases.CBS_TAS.MM.TC3_1_tt20avb40.mm

# *.ES3.eth[*].address = "0A-00-00-00-00-03"

*.ES3.numApps = 9
*.ES3.app[*].typename = "UdpSourceApp"


# NO SINK APPLICATIONS

# SOURCE APPLICATIONS
# vl2 : ES3,SW1 ; SW1,SW3 ; SW3,ES8 ;
# Flow102, 802, 10000, vl2, TT, 10000, 0.0
*.ES3.app[0].display-name = "Flow102"
*.ES3.app[0].io.destAddress = "ES8"
*.ES3.app[0].io.destPort = 1000
*.ES3.app[0].source.packetNameFormat = "%M->ES8:TT-%c"
*.ES3.app[0].source.packetLength = 802B - 58B
*.ES3.app[0].source.productionInterval = 10000us# + exponential(1us)

# *.ES3.app[0].tagger.vlanId = 2

# Flow2, 838, 5000, vl2, CLASS_A, 5000, 0.0
*.ES3.app[1].display-name = "Flow2"
*.ES3.app[1].io.destAddress = "ES8"
*.ES3.app[1].io.destPort = 1001
*.ES3.app[1].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES3.app[1].source.packetLength = 802B - 58B
*.ES3.app[1].source.productionInterval = 2000us# + exponential(1us)

# Flow17, 838, 5000, vl2, CLASS_A, 5000, 0.0
*.ES3.app[2].display-name = "Flow17"
*.ES3.app[2].io.destAddress = "ES8"
*.ES3.app[2].io.destPort = 1002
*.ES3.app[2].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES3.app[2].source.packetLength = 802B - 58B
*.ES3.app[2].source.productionInterval = 2000us# + exponential(1us)

*.ES3.app[0].source.initialProductionOffset = 416us					# offset according to historySCHED1.txt 
*.ES3.app[1].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES3.app[2].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset


# vl6 : ES3,SW1 ; SW1,SW3 ; SW3,SW4 ; SW4,ES10 ;
# Flow106, 870, 10000, vl6, TT, 10000, 0.0
*.ES3.app[3].display-name = "Flow106" ## was wrong Flow6 before
*.ES3.app[3].io.destAddress = "ES10"
*.ES3.app[3].io.destPort = 1003
*.ES3.app[3].source.packetNameFormat = "%M->ES10:TT-%c"
*.ES3.app[3].source.packetLength = 870B - 58B
*.ES3.app[3].source.productionInterval = 10000us# + exponential(1us)

# Flow6, 193, 10000, vl6, CLASS_A, 10000, 0.0
*.ES3.app[4].display-name = "Flow6"
*.ES3.app[4].io.destAddress = "ES10"
*.ES3.app[4].io.destPort = 1004
*.ES3.app[4].source.packetNameFormat = "%M->ES10:AVB_A-%c"
*.ES3.app[4].source.packetLength = 862B - 58B
*.ES3.app[4].source.productionInterval = 10000us# + exponential(1us)

# Flow21, 893, 10000, vl6, CLASS_A, 10000, 0.0
*.ES3.app[5].display-name = "Flow21"
*.ES3.app[5].io.destAddress = "ES10"
*.ES3.app[5].io.destPort = 1005
*.ES3.app[5].source.packetNameFormat = "%M->ES10:AVB_A-%c"
*.ES3.app[5].source.packetLength = 862B - 58B
*.ES3.app[5].source.productionInterval = 10000us# + exponential(1us)

*.ES3.app[3].source.initialProductionOffset = 489us					# offset according to historySCHED1.txt 
*.ES3.app[4].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES3.app[5].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset


# vl13 : ES3,SW1 ; SW1,SW3 ; SW3,ES8 ;
# Flow113, 300, 1000, vl13, TT, 1000, 0.0
*.ES3.app[6].display-name = "Flow113"
*.ES3.app[6].io.destAddress = "ES8"
*.ES3.app[6].io.destPort = 1003
*.ES3.app[6].source.packetNameFormat = "%M->ES8:TT-%c"
*.ES3.app[6].source.packetLength = 300B - 58B
*.ES3.app[6].source.productionInterval = 1000us# + exponential(1us)

# Flow13, 135, 10000, vl13, CLASS_A, 10000, 0.0
*.ES3.app[7].display-name = "Flow13"
*.ES3.app[7].io.destAddress = "ES8"
*.ES3.app[7].io.destPort = 1004
*.ES3.app[7].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES3.app[7].source.packetLength = 419B - 58B
*.ES3.app[7].source.productionInterval = 2000us# + exponential(1us)

# Flow28, 125, 10000, vl13, CLASS_A, 10000, 0.0
*.ES3.app[8].display-name = "Flow28"
*.ES3.app[8].io.destAddress = "ES8"
*.ES3.app[8].io.destPort = 1005
*.ES3.app[8].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES3.app[8].source.packetLength = 419B - 58B
*.ES3.app[8].source.productionInterval = 2000us# + exponential(1us)

*.ES3.app[6].source.initialProductionOffset = 60us					# offset according to historySCHED1.txt 
*.ES3.app[7].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset
*.ES3.app[8].source.initialProductionOffset = uniform(0s,0.01s) 		# randomized AVB initial offset


## configure all egress traffic as part of stream Flow1, start sequence numbering 
*.ES3.bridging.streamIdentifier.identifier.mapping = [{packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1000), stream: "Flow102", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1001), stream: "Flow2", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1002), stream: "Flow17", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1003), stream: "Flow106", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1004), stream: "Flow6", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES10:*" && udp.destPort == 1005), stream: "Flow21", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1003), stream: "Flow113", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1004), stream: "Flow13", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1005), stream: "Flow28", sequenceNumbering: true}]

# encode egress Flows to VLAN 
*.ES3.bridging.streamCoder.encoder.mapping = [{stream: "Flow102", pcp: 4, vlan: 102},
											  {stream: "Flow2", pcp: 0, vlan: 2},
											  {stream: "Flow17", pcp: 0, vlan: 17},
											  {stream: "Flow106", pcp: 4, vlan: 106},
											  {stream: "Flow6", pcp: 0, vlan: 6},
											  {stream: "Flow21", pcp: 0, vlan: 21},
											  {stream: "Flow113", pcp: 4, vlan: 113},
											  {stream: "Flow13", pcp: 0, vlan: 13},
											  {stream: "Flow28", pcp: 0, vlan: 28}]