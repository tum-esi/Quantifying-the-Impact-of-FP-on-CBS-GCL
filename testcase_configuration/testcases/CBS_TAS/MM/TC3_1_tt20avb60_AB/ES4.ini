[General]
network = testcases.CBS_TAS.MM.TC3_1_tt20avb60_AB.mm

# **.ES4.eth[*].address = "0A-00-00-00-00-04"

*.ES4.numApps = 9
*.ES4.app[*].typename = "UdpSourceApp"


# NO SINK APPLICATIONS

# SOURCE APPLICATIONS
# vl3 : ES4,SW2 ; SW2,SW3 ; SW3,ES7 ;
# Flow103, 1174, 2000, vl3, TT, 2000, 0.0
*.ES4.app[0].display-name = "Flow103"
*.ES4.app[0].io.destAddress = "ES7"
*.ES4.app[0].io.destPort = 1003
*.ES4.app[0].source.packetNameFormat = "%M->ES7:TT-%c"
*.ES4.app[0].source.packetLength = 1174B - 58B
*.ES4.app[0].source.productionInterval = 2000us# + exponential(1us)
# *.ES4.app[0].tagger.vlanId = 3

# Flow3, 100, 5000, vl3, CLASS_A, 5000, 0.0
*.ES4.app[1].display-name = "Flow3"
*.ES4.app[1].io.destAddress = "ES7"
*.ES4.app[1].io.destPort = 1004
*.ES4.app[1].source.packetNameFormat = "%M->ES7:AVB_A-%c"
*.ES4.app[1].source.packetLength = 1396B - 58B
*.ES4.app[1].source.productionInterval = 10000us# + exponential(1us)

# Flow18, 1200, 5000, vl3, CLASS_A, 5000, 0.0
*.ES4.app[2].display-name = "Flow18"
*.ES4.app[2].io.destAddress = "ES7"
*.ES4.app[2].io.destPort = 1005
*.ES4.app[2].source.packetNameFormat = "%M->ES7:AVB_B-%c"
*.ES4.app[2].source.packetLength = 1396B - 58B
*.ES4.app[2].source.productionInterval = 10000us# + exponential(1us)

*.ES4.app[0].source.initialProductionOffset = 0us					# offset according to historySCHED1.txt 
*.ES4.app[1].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset
*.ES4.app[2].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset


# vl9 : ES4,SW2 ; SW2,SW3 ; SW3,ES9 ;
# Flow109, 1268, 10000, vl9, TT, 10000, 0.0
*.ES4.app[3].display-name = "Flow109"
*.ES4.app[3].io.destAddress = "ES9"
*.ES4.app[3].io.destPort = 1003
*.ES4.app[3].source.packetNameFormat = "%M->ES9:TT-%c"
*.ES4.app[3].source.packetLength = 1268B - 58B
*.ES4.app[3].source.productionInterval = 10000us# + exponential(1us)

# Flow9, 355, 10000, vl9, CLASS_A, 10000, 0.0
*.ES4.app[4].display-name = "Flow9"
*.ES4.app[4].io.destAddress = "ES9"
*.ES4.app[4].io.destPort = 1004
*.ES4.app[4].source.packetNameFormat = "%M->ES9:AVB_A-%c"
*.ES4.app[4].source.packetLength = 1471B - 58B
*.ES4.app[4].source.productionInterval = 5000us# + exponential(1us)

# Flow24, 255, 1000, vl9, CLASS_A, 1000, 0.0
*.ES4.app[5].display-name = "Flow24"
*.ES4.app[5].io.destAddress = "ES9"
*.ES4.app[5].io.destPort = 1005
*.ES4.app[5].source.packetNameFormat = "%M->ES9:AVB_B-%c"
*.ES4.app[5].source.packetLength = 1471B - 58B
*.ES4.app[5].source.productionInterval = 5000us# + exponential(1us)

*.ES4.app[3].source.initialProductionOffset = 860us					# offset according to historySCHED1.txt 
*.ES4.app[4].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset
*.ES4.app[5].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset



# vl11 : ES4,SW2 ; SW2,SW3 ; SW3,SW4 ; SW4,ES12 ;
# Flow111, 698, 2000, vl11, TT, 2000, 0.0
*.ES4.app[6].display-name = "Flow111"
*.ES4.app[6].io.destAddress = "ES12"
*.ES4.app[6].io.destPort = 1009
*.ES4.app[6].source.packetNameFormat = "%M->ES12:TT-%c"
*.ES4.app[6].source.packetLength = 698B - 58B
*.ES4.app[6].source.productionInterval = 2000us# + exponential(1us)

# Flow11, 1222, 5000, vl11, CLASS_A, 5000, 0.0
*.ES4.app[7].display-name = "Flow11"
*.ES4.app[7].io.destAddress = "ES12"
*.ES4.app[7].io.destPort = 1010
*.ES4.app[7].source.packetNameFormat = "%M->ES12:AVB_A-%c"
*.ES4.app[7].source.packetLength = 1480B - 58B
*.ES4.app[7].source.productionInterval = 5000us# + exponential(1us)

# Flow26, 322, 5000, vl11, CLASS_A, 5000, 0.0
*.ES4.app[8].display-name = "Flow26"
*.ES4.app[8].io.destAddress = "ES12"
*.ES4.app[8].io.destPort = 1011
*.ES4.app[8].source.packetNameFormat = "%M->ES12:AVB_B-%c"
*.ES4.app[8].source.packetLength = 1480B - 58B
*.ES4.app[8].source.productionInterval = 5000us# + exponential(1us)

*.ES4.app[6].source.initialProductionOffset = 449us					# offset according to historySCHED1.txt 
*.ES4.app[7].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset
*.ES4.app[8].source.initialProductionOffset = uniform(0s,0.01s)  		# randomized AVB initial offset


## configure all egress traffic as part of stream Flow1, start sequence numbering 
*.ES4.bridging.streamIdentifier.identifier.mapping = [{packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1003), stream: "Flow103", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1004), stream: "Flow3", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES7:*" && udp.destPort == 1005), stream: "Flow18", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1003), stream: "Flow109", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1004), stream: "Flow9", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1005), stream: "Flow24", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1009), stream: "Flow111", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1010), stream: "Flow11", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES12:*" && udp.destPort == 1011), stream: "Flow26", sequenceNumbering: true}]

# encode egress Flows to VLAN 
*.ES4.bridging.streamCoder.encoder.mapping = [{stream: "Flow103", pcp: 6, vlan: 103},
											  {stream: "Flow3", pcp: 4, vlan: 3},
											  {stream: "Flow18", pcp: 0, vlan: 18},
											  {stream: "Flow109", pcp: 6, vlan: 109},
											  {stream: "Flow9", pcp: 4, vlan: 9},
											  {stream: "Flow24", pcp: 0, vlan: 24},
											  {stream: "Flow111", pcp: 6, vlan: 111},
											  {stream: "Flow11", pcp: 4, vlan: 11},
											  {stream: "Flow26", pcp: 0, vlan: 26}]
