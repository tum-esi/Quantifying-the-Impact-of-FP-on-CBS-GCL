[General]
network = testcases.TAS_CBS_FP.MM.TC3_1_tt20avb40.mm

# **.ES5.eth[*].address = "0A-00-00-00-00-05"

*.ES5.numApps = 9
*.ES5.app[*].typename = "UdpSourceApp"


# NO SINK APPLICATIONS


# SOURCE APPLICATIONS

# vl4 : ES5,SW2 ; SW2,SW3 ; SW3,ES9 ;
# Flow104, 1449, 5000, vl4, TT, 5000, 0.0
*.ES5.app[0].display-name = "Flow104"
*.ES5.app[0].io.destAddress = "ES9"
*.ES5.app[0].io.destPort = 1000
*.ES5.app[0].source.packetNameFormat = "%M->ES9:TT-%c"
*.ES5.app[0].source.packetLength = 1449B # 1449B - 58B
*.ES5.app[0].source.productionInterval = 5000us# + exponential(1us)
# *.ES5.app[0].tagger.vlanId = 4

# Flow4, 126, 5000, vl4, CLASS_A, 5000, 0.0
*.ES5.app[1].display-name = "Flow4"
*.ES5.app[1].io.destAddress = "ES9"
*.ES5.app[1].io.destPort = 1001
*.ES5.app[1].source.packetNameFormat = "%M->ES9:AVB_A-%c"
*.ES5.app[1].source.packetLength = 163B - 58B
*.ES5.app[1].source.productionInterval = 2000us# + exponential(1us)

# Flow19, 1426, 5000, vl4, CLASS_A, 5000, 0.0
*.ES5.app[2].display-name = "Flow19"
*.ES5.app[2].io.destAddress = "ES9"
*.ES5.app[2].io.destPort = 1002
*.ES5.app[2].source.packetNameFormat = "%M->ES9:AVB_A-%c"
*.ES5.app[2].source.packetLength = 1463B - 58B
*.ES5.app[2].source.productionInterval = 2000us# + exponential(1us)

*.ES5.app[0].source.initialProductionOffset = 534us					# offset according to historySCHED1.txt 
*.ES5.app[1].source.initialProductionOffset = uniform(0s,0.01s)		# randomized AVB initial offset
*.ES5.app[2].source.initialProductionOffset = uniform(0s,0.01s)		# randomized AVB initial offset


# vl10 : ES5,SW2 ; SW2,SW3 ; SW3,SW4 ; SW4,ES11 ;
# Flow110, 826, 5000, vl10, TT, 5000, 0.0
*.ES5.app[3].display-name = "Flow110"
*.ES5.app[3].io.destAddress = "ES11"
*.ES5.app[3].io.destPort = 1000
*.ES5.app[3].source.packetNameFormat = "%M->ES11:TT-%c"
*.ES5.app[3].source.packetLength = 826B # 826B - 58B
*.ES5.app[3].source.productionInterval = 5000us# + exponential(1us)

# Flow10, 300, 10000, vl10, CLASS_A, 10000, 0.0
*.ES5.app[4].display-name = "Flow10"
*.ES5.app[4].io.destAddress = "ES11"
*.ES5.app[4].io.destPort = 1001
*.ES5.app[4].source.packetNameFormat = "%M->ES11:AVB_A-%c"
*.ES5.app[4].source.packetLength = 120B - 58B
*.ES5.app[4].source.productionInterval = 10000us# + exponential(1us)

# Flow25, 300, 10000, vl10, CLASS_A, 10000, 0.0
*.ES5.app[5].display-name = "Flow25"
*.ES5.app[5].io.destAddress = "ES11"
*.ES5.app[5].io.destPort = 1002
*.ES5.app[5].source.packetNameFormat = "%M->ES11:AVB_A-%c"
*.ES5.app[5].source.packetLength = 1290B - 58B
*.ES5.app[5].source.productionInterval = 2000us# + exponential(1us)

*.ES5.app[3].source.initialProductionOffset = 779us					# offset according to historySCHED1.txt 
*.ES5.app[4].source.initialProductionOffset = uniform(0s,0.01s)		# randomized AVB initial offset
*.ES5.app[5].source.initialProductionOffset = uniform(0s,0.01s)		# randomized AVB initial offset


# vl14 : ES5,SW2 ; SW2,SW3 ; SW3,ES8 ;
# Flow114, 593, 5000, vl14, TT, 5000, 0.0
*.ES5.app[6].display-name = "Flow114"
*.ES5.app[6].io.destAddress = "ES8"
*.ES5.app[6].io.destPort = 1006
*.ES5.app[6].source.packetNameFormat = "%M->ES8:TT-%c"
*.ES5.app[6].source.packetLength = 593B # 593B - 58B
*.ES5.app[6].source.productionInterval = 5000us# + exponential(1us)

# Flow14, 305, 2000, vl14, CLASS_A, 2000, 0.0
*.ES5.app[7].display-name = "Flow14"
*.ES5.app[7].io.destAddress = "ES8"
*.ES5.app[7].io.destPort = 1007
*.ES5.app[7].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES5.app[7].source.packetLength = 1419B - 58B
*.ES5.app[7].source.productionInterval = 5000us# + exponential(1us)

# Flow29, 305, 2000, vl14, CLASS_A, 2000, 0.0
*.ES5.app[8].display-name = "Flow29"
*.ES5.app[8].io.destAddress = "ES8"
*.ES5.app[8].io.destPort = 1008
*.ES5.app[8].source.packetNameFormat = "%M->ES8:AVB_A-%c"
*.ES5.app[8].source.packetLength = 1419B - 58B
*.ES5.app[8].source.productionInterval = 5000us# + exponential(1us)

*.ES5.app[6].source.initialProductionOffset = 659us				    # offset according to historySCHED1.txt 
*.ES5.app[7].source.initialProductionOffset = uniform(0s,0.01s)	    # randomized AVB initial offset
*.ES5.app[8].source.initialProductionOffset = uniform(0s,0.01s)	    # randomized AVB initial offset



## configure all egress traffic as part of stream Flow1, start sequence numbering 
*.ES5.bridging.streamIdentifier.identifier.mapping = [{packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1000), stream: "Flow104", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1001), stream: "Flow4", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES9:*" && udp.destPort == 1002), stream: "Flow19", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES11:*" && udp.destPort == 1000), stream: "Flow110", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES11:*" && udp.destPort == 1001), stream: "Flow10", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES11:*" && udp.destPort == 1002), stream: "Flow25", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1006), stream: "Flow114", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1007), stream: "Flow14", sequenceNumbering: true},
													  {packetFilter: expr(has(udp) && name =~ "*->ES8:*" && udp.destPort == 1008), stream: "Flow29", sequenceNumbering: true}]

# encode egress Flows to VLAN 
*.ES5.bridging.streamCoder.encoder.mapping = [{stream: "Flow104", pcp: 4, vlan: 104},
											  {stream: "Flow4", pcp: 0, vlan: 4},
											  {stream: "Flow19", pcp: 0, vlan: 19},
											  {stream: "Flow110", pcp: 4, vlan: 110},
											  {stream: "Flow10", pcp: 0, vlan: 10},
											  {stream: "Flow25", pcp: 0, vlan: 25},
											  {stream: "Flow114", pcp: 4, vlan: 114},
											  {stream: "Flow14", pcp: 0, vlan: 14},
											  {stream: "Flow29", pcp: 0, vlan: 29}]